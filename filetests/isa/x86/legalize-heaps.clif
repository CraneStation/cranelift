test legalizer
target x86_64

; Test legalization for various forms of heap addresses.

function %heap_addrs(i32, i64, i64 vmctx) {
    gv5 = vmctx
    gv0 = iadd_imm.i64 gv5, 64
    gv1 = iadd_imm.i64 gv5, 72
    gv2 = iadd_imm.i64 gv5, 80
    gv3 = iadd_imm.i64 gv5, 88
    gv4 = load.i32 gv3

    heap0 = static gv0, min 0x1_0000, bound 0x1_0000_0000, guard 0x8000_0000, index_type i32
    heap1 = static gv0, guard 0x1000, bound 0x1_0000, index_type i32
    heap2 = static gv0, min 0x1_0000, bound 0x1_0000_0000, guard 0x8000_0000, index_type i64
    heap3 = static gv0, guard 0x1000, bound 0x1_0000, index_type i64
    heap4 = dynamic gv1, min 0x1_0000, bound gv4, guard 0x8000_0000, index_type i32
    heap5 = dynamic gv1, bound gv4, guard 0x1000, index_type i32
    heap6 = dynamic gv1, min 0x1_0000, bound gv2, guard 0x8000_0000, index_type i64
    heap7 = dynamic gv1, bound gv2, guard 0x1000, index_type i64

    ; check: heap0 = static gv0, min 0x0001_0000, bound 0x0001_0000_0000, guard 0x8000_0000, index_type i32
    ; check: heap1 = static gv0, min 0, bound 0x0001_0000, guard 4096, index_type i32
    ; check: heap2 = static gv0, min 0x0001_0000, bound 0x0001_0000_0000, guard 0x8000_0000, index_type i64
    ; check: heap3 = static gv0, min 0, bound 0x0001_0000, guard 4096, index_type i64
    ; check: heap4 = dynamic gv1, min 0x0001_0000, bound gv4, guard 0x8000_0000, index_type i32
    ; check: heap5 = dynamic gv1, min 0, bound gv4, guard 4096, index_type i32
    ; check: heap6 = dynamic gv1, min 0x0001_0000, bound gv2, guard 0x8000_0000, index_type i64
    ; check: heap7 = dynamic gv1, min 0, bound gv2, guard 4096, index_type i64

ebb0(v0: i32, v1: i64, v3: i64):
    ; The fast-path; 32-bit index, static heap with a sufficient bound, no bounds check needed!
    v4 = heap_addr.i64 heap0, v0, 0
    ; check:         v12 = uextend.i64 v0
    ; check:         v14 -> v3
    ; check:         v13 = iadd_imm v14, 64
    ; check:         v4 = iadd v13, v12

    v5 = heap_addr.i64 heap1, v0, 0
    ; check:         v15 = icmp_imm ugt v0, 0x0001_0000
    ; check:         brz v15, ebb1
    ; check:         trap heap_oob
    ; check:     ebb1:
    ; check:         v16 = uextend.i64 v0
    ; check:         v18 -> v3
    ; check:         v17 = iadd_imm.i64 v18, 64
    ; check:         v5 = iadd v17, v16

    v6 = heap_addr.i64 heap2, v1, 0
    ; check:         v21 = iconst.i64 0x0001_0000_0000
    ; check:         v19 = icmp.i64 ugt v1, v21
    ; check:         brz v19, ebb2
    ; check:         trap heap_oob
    ; check:     ebb2:
    ; check:         v22 -> v3
    ; check:         v20 = iadd_imm.i64 v22, 64
    ; check:         v6 = iadd v20, v1

    v7 = heap_addr.i64 heap3, v1, 0
    ; check:         v23 = icmp_imm.i64 ugt v1, 0x0001_0000
    ; check:         brz v23, ebb3
    ; check:         trap heap_oob
    ; check:     ebb3:
    ; check:         v25 -> v3
    ; check:         v24 = iadd_imm.i64 v25, 64
    ; check:         v7 = iadd v24, v1

    v8 = heap_addr.i64 heap4, v0, 0
    ; check:         v31 -> v3
    ; check:         v26 = load.i32 notrap aligned v31+88
    ; check:         v27 = iadd_imm v26, 0
    ; check:         v28 = icmp.i32 ugt v0, v27
    ; check:         brz v28, ebb4
    ; check:         trap heap_oob
    ; check:     ebb4:
    ; check:         v29 = uextend.i64 v0
    ; check:         v32 -> v3
    ; check:         v30 = iadd_imm.i64 v32, 72
    ; check:         v8 = iadd v30, v29

    v9 = heap_addr.i64 heap5, v0, 0
    ; check:         v38 -> v3
    ; check:         v33 = load.i32 notrap aligned v38+88
    ; check:         v34 = iadd_imm v33, 0
    ; check:         v35 = icmp.i32 ugt v0, v34
    ; check:         brz v35, ebb5
    ; check:         trap heap_oob
    ; check:     ebb5:
    ; check:         v36 = uextend.i64 v0
    ; check:         v39 -> v3
    ; check:         v37 = iadd_imm.i64 v39, 72
    ; check:         v9 = iadd v37, v36

    v10 = heap_addr.i64 heap6, v1, 0
    ; check:         v44 -> v3
    ; check:         v40 = iadd_imm.i64 v44, 80
    ; check:         v41 = iadd_imm v40, 0
    ; check:         v42 = icmp.i64 ugt v1, v41
    ; check:         brz v42, ebb6
    ; check:         trap heap_oob
    ; check:     ebb6:
    ; check:         v45 -> v3
    ; check:         v43 = iadd_imm.i64 v45, 72
    ; check:         v10 = iadd v43, v1

    v11 = heap_addr.i64 heap7, v1, 0
    ; check:         v50 -> v3
    ; check:         v46 = iadd_imm.i64 v50, 80
    ; check:         v47 = iadd_imm v46, 0
    ; check:         v48 = icmp.i64 ugt v1, v47
    ; check:         brz v48, ebb7
    ; check:         trap heap_oob
    ; check:     ebb7:
    ; check:         v51 -> v3
    ; check:         v49 = iadd_imm.i64 v51, 72
    ; check:         v11 = iadd v49, v1

    return
}
