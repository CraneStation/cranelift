test legalizer
target x86_64

; Test legalization for various forms of table addresses.

function %table_addrs(i32, i64, i64 vmctx) {
    gv4 = vmctx
    gv0 = iadd_imm.i64 gv4, 72
    gv1 = iadd_imm.i64 gv4, 80
    gv2 = iadd_imm.i64 gv4, 88
    gv3 = load.i32 gv2

    table0 = dynamic gv0, min 0x1_0000, bound gv3, element_size 1, index_type i32
    table1 = dynamic gv0, bound gv3, element_size 16, index_type i32
    table2 = dynamic gv0, min 0x1_0000, bound gv1, element_size 1, index_type i64
    table3 = dynamic gv0, bound gv1, element_size 16, index_type i64

    ; check: table0 = dynamic gv0, min 0x0001_0000, bound gv3, element_size 1, index_type i32
    ; check: table1 = dynamic gv0, min 0, bound gv3, element_size 16, index_type i32
    ; check: table2 = dynamic gv0, min 0x0001_0000, bound gv1, element_size 1, index_type i64
    ; check: table3 = dynamic gv0, min 0, bound gv1, element_size 16, index_type i64

ebb0(v0: i32, v1: i64, v3: i64):
    v4 = table_addr.i64 table0, v0, +0
    ; check:         v12 -> v3
    ; check:         v8 = load.i32 notrap aligned v12+88
    ; check:         v9 = icmp uge v0, v8
    ; check:         brz v9, ebb1
    ; check:         trap table_oob
    ; check:     ebb1:
    ; check:         v10 = uextend.i64 v0
    ; check:         v13 -> v3
    ; check:         v11 = iadd_imm.i64 v13, 72
    ; check:         v4 = iadd v11, v10

    v5 = table_addr.i64 table1, v0, +0
    ; check:         v19 -> v3
    ; check:         v14 = load.i32 notrap aligned v19+88
    ; check:         v15 = icmp.i32 uge v0, v14
    ; check:         brz v15, ebb2
    ; check:         trap table_oob
    ; check:     ebb2:
    ; check:         v16 = uextend.i64 v0
    ; check:         v20 -> v3
    ; check:         v17 = iadd_imm.i64 v20, 72
    ; check:         v18 = ishl_imm v16, 4
    ; check:         v5 = iadd v17, v18

    v6 = table_addr.i64 table2, v1, +0
    ; check:         v24 -> v3
    ; check:         v21 = iadd_imm.i64 v24, 80
    ; check:         v22 = icmp.i64 uge v1, v21
    ; check:         brz v22, ebb3
    ; check:         trap table_oob
    ; check:     ebb3:
    ; check:         v25 -> v3
    ; check:         v23 = iadd_imm.i64 v25, 72
    ; check:         v6 = iadd v23, v1

    v7 = table_addr.i64 table3, v1, +0
    ; check:         v30 -> v3
    ; check:         v26 = iadd_imm.i64 v30, 80
    ; check:         v27 = icmp.i64 uge v1, v26
    ; check:         brz v27, ebb4
    ; check:         trap table_oob
    ; check:     ebb4:
    ; check:         v31 -> v3
    ; check:         v28 = iadd_imm.i64 v31, 72
    ; check:         v29 = ishl_imm.i64 v1, 4
    ; check:         v7 = iadd v28, v29

    return
}
