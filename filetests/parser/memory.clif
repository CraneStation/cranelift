test cat
test verifier

function %vmglobal(i64 vmctx) -> i32 {
    template3 = vmctx
    ; check: template3 = vmctx
ebb0(v0: i64):
    v1 = template.i32 template3
    ; check: v1 = template.i32 template3
    return v1
}

function %load_and_add_imm(i64 vmctx) -> i32 {
    template2 = vmctx
    template3 = load.i32 notrap aligned template2-72
    template4 = iadd_imm template3, -32
    ; check: template2 = vmctx
    ; check: template3 = load.i32 notrap aligned template2-72
    ; check: template4 = iadd_imm template3, -32
ebb0(v0: i64):
    v1 = template.i32 template4
    ; check: v1 = template.i32 template4
    return v1
}

; Refer to a global value before it's been declared.
function %backref(i64 vmctx) -> i32 {
    template0 = iadd_imm template1, -32
    ; check: template0 = iadd_imm template1, -32
    template1 = load.i32 notrap aligned template2
    ; check: template1 = load.i32 notrap aligned template2
    template2 = vmctx
    ; check: template2 = vmctx
ebb0(v0: i64):
    v1 = template.i32 template1
    return v1
}

function %symbol() -> i32 {
    template0 = symbol %something
    ; check: template0 = symbol %something
    template1 = symbol u8:9
    ; check: template1 = symbol u8:9
ebb0:
    v0 = template.i32 template0
    ; check: v0 = template.i32 template0
    v1 = template.i32 template1
    ; check: v1 = template.i32 template1
    v2 = bxor v0, v1
    return v2
}

; Declare static heaps.
function %sheap(i32, i64 vmctx) -> i64 {
    heap1 = static template5, min 0x1_0000, bound 0x1_0000_0000, offset_guard 0x8000_0000
    heap2 = static template5, offset_guard 0x1000, bound 0x1_0000
    template4 = vmctx
    template5 = iadd_imm template4, 64

    ; check: heap1 = static template5, min 0x0001_0000, bound 0x0001_0000_0000, offset_guard 0x8000_0000
    ; check: heap2 = static template5, min 0, bound 0x0001_0000, offset_guard 4096
ebb0(v1: i32, v2: i64):
    v3 = heap_addr.i64 heap1, v1, 0
    ; check: v3 = heap_addr.i64 heap1, v1, 0
    return v3
}

; Declare dynamic heaps.
function %dheap(i32, i64 vmctx) -> i64 {
    heap1 = dynamic template5, min 0x1_0000, bound template6, offset_guard 0x8000_0000
    heap2 = dynamic template5, bound template6, offset_guard 0x1000
    template4 = vmctx
    template5 = iadd_imm template4, 64
    template6 = iadd_imm template4, 72

    ; check: heap1 = dynamic template5, min 0x0001_0000, bound template6, offset_guard 0x8000_0000
    ; check: heap2 = dynamic template5, min 0, bound template6, offset_guard 4096
ebb0(v1: i32, v2: i64):
    v3 = heap_addr.i64 heap2, v1, 0
    ; check: v3 = heap_addr.i64 heap2, v1, 0
    return v3
}
